import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// Import the VitePWA plugin
import { VitePWA } from "vite-plugin-pwa"; // <--- NEW IMPORT

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' && componentTagger(), // Keep your existing plugins
    // Add the VitePWA plugin configuration
    VitePWA({
      registerType: 'autoUpdate', // Automatically update the Service Worker in the client
      strategies: 'injectManifest', // Use your existing service-worker.js file
      srcDir: 'public', // Path to your service-worker.js
      filename: 'service-worker.js', // Name of your service worker file
      workbox: {
        // This array defines which files from your build output should be precached.
        // It's crucial for including hashed JS/CSS files generated by Vite.
        globPatterns: [
          '**/*.{js,css,html,ico,png,svg,json,webmanifest}',
          // You might need to adjust these patterns based on your project's asset structure
          // For example, if your images are in 'src/assets', they won't be in 'dist' root.
          // Ensure paths like '/mcm-logo-192.png' in your manifest/SW logic match your public folder structure
        ],
        // Optional: If you have very large assets, you might need to increase this limit
        // maximumFileSizeToCacheInBytes: 5 * 1024 * 1024, // 5 MB
      },
      // Configuration for your Web App Manifest (manifest.json)
      // This will either generate a manifest.json or override properties if one exists
      manifest: {
        name: 'MCM Alerts',
        short_name: 'MCM Alerts',
        description: 'MCM Alerts Application',
        theme_color: '#ffffff',
        icons: [
          {
            src: 'mcm-logo-192.png', // Ensure this path is correct relative to public/
            sizes: '192x192',
            type: 'image/png',
          },
          {
            src: 'mcm-logo-512.png', // Ensure this path is correct relative to public/
            sizes: '512x512',
            type: 'image/png',
          },
          // Consider adding a maskable icon for better Android integration
          // {
          //   src: 'mcm-logo-maskable-512.png',
          //   sizes: '512x512',
          //   type: 'image/png',
          //   purpose: 'maskable'
          // }
        ],
        // display: 'standalone', // Consider 'standalone' for an app-like experience
      },
      // Development server options for PWA debugging
      devOptions: {
        enabled: mode === 'development', // Enable PWA in development mode for easier debugging
        type: 'module', // Use module-based service worker
      },
    }),
  ].filter(Boolean), // Removes 'false' from the plugins array in dev mode
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));

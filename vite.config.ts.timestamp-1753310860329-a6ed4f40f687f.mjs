// vite.config.ts
import { defineConfig } from "file:///home/project/node_modules/vite/dist/node/index.js";
import react from "file:///home/project/node_modules/@vitejs/plugin-react-swc/index.mjs";
import path from "path";
import { componentTagger } from "file:///home/project/node_modules/lovable-tagger/dist/index.js";
import { VitePWA } from "file:///home/project/node_modules/vite-plugin-pwa/dist/index.js";
var __vite_injected_original_dirname = "/home/project";
var vite_config_default = defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080
  },
  plugins: [
    react(),
    mode === "development" && componentTagger(),
    // Keep your existing plugins
    // Add the VitePWA plugin configuration
    VitePWA({
      registerType: "autoUpdate",
      // Automatically update the Service Worker in the client
      strategies: "injectManifest",
      // Use your existing service-worker.js file
      srcDir: "public",
      // Path to your service-worker.js
      filename: "service-worker.js",
      // Name of your service worker file
      workbox: {
        // This array defines which files from your build output should be precached.
        // It's crucial for including hashed JS/CSS files generated by Vite.
        globPatterns: [
          "**/*.{js,css,html,ico,png,svg,json,webmanifest}"
          // You might need to adjust these patterns based on your project's asset structure
          // For example, if your images are in 'src/assets', they won't be in 'dist' root.
          // Ensure paths like '/mcm-logo-192.png' in your manifest/SW logic match your public folder structure
        ]
        // Optional: If you have very large assets, you might need to increase this limit
        // maximumFileSizeToCacheInBytes: 5 * 1024 * 1024, // 5 MB
      },
      // Configuration for your Web App Manifest (manifest.json)
      // This will either generate a manifest.json or override properties if one exists
      manifest: {
        name: "MCM Alerts",
        short_name: "MCM Alerts",
        description: "MCM Alerts Application",
        theme_color: "#ffffff",
        icons: [
          {
            src: "mcm-logo-192.png",
            // Ensure this path is correct relative to public/
            sizes: "192x192",
            type: "image/png"
          },
          {
            src: "mcm-logo-512.png",
            // Ensure this path is correct relative to public/
            sizes: "512x512",
            type: "image/png"
          }
          // Consider adding a maskable icon for better Android integration
          // {
          //   src: 'mcm-logo-maskable-512.png',
          //   sizes: '512x512',
          //   type: 'image/png',
          //   purpose: 'maskable'
          // }
        ]
        // display: 'standalone', // Consider 'standalone' for an app-like experience
      },
      // Development server options for PWA debugging
      devOptions: {
        enabled: mode === "development",
        // Enable PWA in development mode for easier debugging
        type: "module"
        // Use module-based service worker
      }
    })
  ].filter(Boolean),
  // Removes 'false' from the plugins array in dev mode
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9wcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBjb21wb25lbnRUYWdnZXIgfSBmcm9tIFwibG92YWJsZS10YWdnZXJcIjtcblxuLy8gSW1wb3J0IHRoZSBWaXRlUFdBIHBsdWdpblxuaW1wb3J0IHsgVml0ZVBXQSB9IGZyb20gXCJ2aXRlLXBsdWdpbi1wd2FcIjsgLy8gPC0tLSBORVcgSU1QT1JUXG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgbW9kZSB9KSA9PiAoe1xuICBzZXJ2ZXI6IHtcbiAgICBob3N0OiBcIjo6XCIsXG4gICAgcG9ydDogODA4MCxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIHJlYWN0KCksXG4gICAgbW9kZSA9PT0gJ2RldmVsb3BtZW50JyAmJiBjb21wb25lbnRUYWdnZXIoKSwgLy8gS2VlcCB5b3VyIGV4aXN0aW5nIHBsdWdpbnNcbiAgICAvLyBBZGQgdGhlIFZpdGVQV0EgcGx1Z2luIGNvbmZpZ3VyYXRpb25cbiAgICBWaXRlUFdBKHtcbiAgICAgIHJlZ2lzdGVyVHlwZTogJ2F1dG9VcGRhdGUnLCAvLyBBdXRvbWF0aWNhbGx5IHVwZGF0ZSB0aGUgU2VydmljZSBXb3JrZXIgaW4gdGhlIGNsaWVudFxuICAgICAgc3RyYXRlZ2llczogJ2luamVjdE1hbmlmZXN0JywgLy8gVXNlIHlvdXIgZXhpc3Rpbmcgc2VydmljZS13b3JrZXIuanMgZmlsZVxuICAgICAgc3JjRGlyOiAncHVibGljJywgLy8gUGF0aCB0byB5b3VyIHNlcnZpY2Utd29ya2VyLmpzXG4gICAgICBmaWxlbmFtZTogJ3NlcnZpY2Utd29ya2VyLmpzJywgLy8gTmFtZSBvZiB5b3VyIHNlcnZpY2Ugd29ya2VyIGZpbGVcbiAgICAgIHdvcmtib3g6IHtcbiAgICAgICAgLy8gVGhpcyBhcnJheSBkZWZpbmVzIHdoaWNoIGZpbGVzIGZyb20geW91ciBidWlsZCBvdXRwdXQgc2hvdWxkIGJlIHByZWNhY2hlZC5cbiAgICAgICAgLy8gSXQncyBjcnVjaWFsIGZvciBpbmNsdWRpbmcgaGFzaGVkIEpTL0NTUyBmaWxlcyBnZW5lcmF0ZWQgYnkgVml0ZS5cbiAgICAgICAgZ2xvYlBhdHRlcm5zOiBbXG4gICAgICAgICAgJyoqLyoue2pzLGNzcyxodG1sLGljbyxwbmcsc3ZnLGpzb24sd2VibWFuaWZlc3R9JyxcbiAgICAgICAgICAvLyBZb3UgbWlnaHQgbmVlZCB0byBhZGp1c3QgdGhlc2UgcGF0dGVybnMgYmFzZWQgb24geW91ciBwcm9qZWN0J3MgYXNzZXQgc3RydWN0dXJlXG4gICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHlvdXIgaW1hZ2VzIGFyZSBpbiAnc3JjL2Fzc2V0cycsIHRoZXkgd29uJ3QgYmUgaW4gJ2Rpc3QnIHJvb3QuXG4gICAgICAgICAgLy8gRW5zdXJlIHBhdGhzIGxpa2UgJy9tY20tbG9nby0xOTIucG5nJyBpbiB5b3VyIG1hbmlmZXN0L1NXIGxvZ2ljIG1hdGNoIHlvdXIgcHVibGljIGZvbGRlciBzdHJ1Y3R1cmVcbiAgICAgICAgXSxcbiAgICAgICAgLy8gT3B0aW9uYWw6IElmIHlvdSBoYXZlIHZlcnkgbGFyZ2UgYXNzZXRzLCB5b3UgbWlnaHQgbmVlZCB0byBpbmNyZWFzZSB0aGlzIGxpbWl0XG4gICAgICAgIC8vIG1heGltdW1GaWxlU2l6ZVRvQ2FjaGVJbkJ5dGVzOiA1ICogMTAyNCAqIDEwMjQsIC8vIDUgTUJcbiAgICAgIH0sXG4gICAgICAvLyBDb25maWd1cmF0aW9uIGZvciB5b3VyIFdlYiBBcHAgTWFuaWZlc3QgKG1hbmlmZXN0Lmpzb24pXG4gICAgICAvLyBUaGlzIHdpbGwgZWl0aGVyIGdlbmVyYXRlIGEgbWFuaWZlc3QuanNvbiBvciBvdmVycmlkZSBwcm9wZXJ0aWVzIGlmIG9uZSBleGlzdHNcbiAgICAgIG1hbmlmZXN0OiB7XG4gICAgICAgIG5hbWU6ICdNQ00gQWxlcnRzJyxcbiAgICAgICAgc2hvcnRfbmFtZTogJ01DTSBBbGVydHMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ01DTSBBbGVydHMgQXBwbGljYXRpb24nLFxuICAgICAgICB0aGVtZV9jb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICBpY29uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNyYzogJ21jbS1sb2dvLTE5Mi5wbmcnLCAvLyBFbnN1cmUgdGhpcyBwYXRoIGlzIGNvcnJlY3QgcmVsYXRpdmUgdG8gcHVibGljL1xuICAgICAgICAgICAgc2l6ZXM6ICcxOTJ4MTkyJyxcbiAgICAgICAgICAgIHR5cGU6ICdpbWFnZS9wbmcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3JjOiAnbWNtLWxvZ28tNTEyLnBuZycsIC8vIEVuc3VyZSB0aGlzIHBhdGggaXMgY29ycmVjdCByZWxhdGl2ZSB0byBwdWJsaWMvXG4gICAgICAgICAgICBzaXplczogJzUxMng1MTInLFxuICAgICAgICAgICAgdHlwZTogJ2ltYWdlL3BuZycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBDb25zaWRlciBhZGRpbmcgYSBtYXNrYWJsZSBpY29uIGZvciBiZXR0ZXIgQW5kcm9pZCBpbnRlZ3JhdGlvblxuICAgICAgICAgIC8vIHtcbiAgICAgICAgICAvLyAgIHNyYzogJ21jbS1sb2dvLW1hc2thYmxlLTUxMi5wbmcnLFxuICAgICAgICAgIC8vICAgc2l6ZXM6ICc1MTJ4NTEyJyxcbiAgICAgICAgICAvLyAgIHR5cGU6ICdpbWFnZS9wbmcnLFxuICAgICAgICAgIC8vICAgcHVycG9zZTogJ21hc2thYmxlJ1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgXSxcbiAgICAgICAgLy8gZGlzcGxheTogJ3N0YW5kYWxvbmUnLCAvLyBDb25zaWRlciAnc3RhbmRhbG9uZScgZm9yIGFuIGFwcC1saWtlIGV4cGVyaWVuY2VcbiAgICAgIH0sXG4gICAgICAvLyBEZXZlbG9wbWVudCBzZXJ2ZXIgb3B0aW9ucyBmb3IgUFdBIGRlYnVnZ2luZ1xuICAgICAgZGV2T3B0aW9uczoge1xuICAgICAgICBlbmFibGVkOiBtb2RlID09PSAnZGV2ZWxvcG1lbnQnLCAvLyBFbmFibGUgUFdBIGluIGRldmVsb3BtZW50IG1vZGUgZm9yIGVhc2llciBkZWJ1Z2dpbmdcbiAgICAgICAgdHlwZTogJ21vZHVsZScsIC8vIFVzZSBtb2R1bGUtYmFzZWQgc2VydmljZSB3b3JrZXJcbiAgICAgIH0sXG4gICAgfSksXG4gIF0uZmlsdGVyKEJvb2xlYW4pLCAvLyBSZW1vdmVzICdmYWxzZScgZnJvbSB0aGUgcGx1Z2lucyBhcnJheSBpbiBkZXYgbW9kZVxuICByZXNvbHZlOiB7XG4gICAgYWxpYXM6IHtcbiAgICAgIFwiQFwiOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4vc3JjXCIpLFxuICAgIH0sXG4gIH0sXG59KSk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXlOLFNBQVMsb0JBQW9CO0FBQ3RQLE9BQU8sV0FBVztBQUNsQixPQUFPLFVBQVU7QUFDakIsU0FBUyx1QkFBdUI7QUFHaEMsU0FBUyxlQUFlO0FBTnhCLElBQU0sbUNBQW1DO0FBU3pDLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsS0FBSyxPQUFPO0FBQUEsRUFDekMsUUFBUTtBQUFBLElBQ04sTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLE1BQU07QUFBQSxJQUNOLFNBQVMsaUJBQWlCLGdCQUFnQjtBQUFBO0FBQUE7QUFBQSxJQUUxQyxRQUFRO0FBQUEsTUFDTixjQUFjO0FBQUE7QUFBQSxNQUNkLFlBQVk7QUFBQTtBQUFBLE1BQ1osUUFBUTtBQUFBO0FBQUEsTUFDUixVQUFVO0FBQUE7QUFBQSxNQUNWLFNBQVM7QUFBQTtBQUFBO0FBQUEsUUFHUCxjQUFjO0FBQUEsVUFDWjtBQUFBO0FBQUE7QUFBQTtBQUFBLFFBSUY7QUFBQTtBQUFBO0FBQUEsTUFHRjtBQUFBO0FBQUE7QUFBQSxNQUdBLFVBQVU7QUFBQSxRQUNSLE1BQU07QUFBQSxRQUNOLFlBQVk7QUFBQSxRQUNaLGFBQWE7QUFBQSxRQUNiLGFBQWE7QUFBQSxRQUNiLE9BQU87QUFBQSxVQUNMO0FBQUEsWUFDRSxLQUFLO0FBQUE7QUFBQSxZQUNMLE9BQU87QUFBQSxZQUNQLE1BQU07QUFBQSxVQUNSO0FBQUEsVUFDQTtBQUFBLFlBQ0UsS0FBSztBQUFBO0FBQUEsWUFDTCxPQUFPO0FBQUEsWUFDUCxNQUFNO0FBQUEsVUFDUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsUUFRRjtBQUFBO0FBQUEsTUFFRjtBQUFBO0FBQUEsTUFFQSxZQUFZO0FBQUEsUUFDVixTQUFTLFNBQVM7QUFBQTtBQUFBLFFBQ2xCLE1BQU07QUFBQTtBQUFBLE1BQ1I7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNILEVBQUUsT0FBTyxPQUFPO0FBQUE7QUFBQSxFQUNoQixTQUFTO0FBQUEsSUFDUCxPQUFPO0FBQUEsTUFDTCxLQUFLLEtBQUssUUFBUSxrQ0FBVyxPQUFPO0FBQUEsSUFDdEM7QUFBQSxFQUNGO0FBQ0YsRUFBRTsiLAogICJuYW1lcyI6IFtdCn0K
